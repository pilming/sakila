<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">
	<!-- 맵으로 변경해야됨 -->
	<select id="selectFilmList" parameterType="java.util.Map" resultType="com.gd.sakila.vo.FilmView">
		SELECT 
		   FID FID,
		   title title,
		   category category,
		   price price,
		   length length,
		   rating rating,
		   actors actors
		FROM  nicer_but_slower_film_list
		<where>
			<if test="category != null and category != ''">
				AND category = #{category}
			</if>
			<if test="rating != null and rating != ''">
				AND rating = #{rating}
			</if>
			<if test="rentalRate != null and rentalRate != ''">
				AND price =  #{rentalRate}
			</if>
			<if test="searchWord != null and searchWord != ''">
				AND title LIKE CONCAT('%',#{searchWord},'%')
			</if>
			<if test="searchActor != null and searchActor != ''">
				AND actors LIKE CONCAT('%',#{searchActor},'%')
			</if>
			
	    </where>
		LIMIT #{page.beginRow}, #{page.rowPerPage}
	</select>
	
	<!-- 매개변수로 페이지 전달 맵으로 변경해야됨-->
	<select id="selectFilmTotal" parameterType="java.util.Map" resultType="int">
		SELECT 
			COUNT(*)
		FROM
			nicer_but_slower_film_list
		    <where>
		    	<if test="category != null and category != ''">
					AND category = #{category}
				</if>
				<if test="rating != null and rating != ''">
					AND rating = #{rating}
				</if>
				<if test="rentalRate != null and rentalRate != ''">
					AND price =  #{rentalRate}
				</if>
				<if test="searchWord != null and searchWord != ''">
					AND title LIKE CONCAT('%',#{searchWord},'%')
				</if>
				<if test="searchActor != null and searchActor != ''">
					AND actors LIKE CONCAT('%',#{searchActor},'%')
				</if>
		    </where>
		
	</select>
	<!-- Map : filmId(in), storeId(in), filmCount(out) -->
	<select id="selectFilmInStock" parameterType="java.util.Map" resultType="int" statementType="CALLABLE">
      {
         call film_in_stock(
            #{filmId},
            #{storeId},
            #{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer}
         )
      }
   </select>
	<select id="selectFilmOne" parameterType="int" resultType="java.util.Map">
		SELECT
			f.film_id filmId,
			f.title title,
			f.description description,
			f.release_year releaseYear,
			l.name language,
			f.original_language_id originalLaguageId,
			f.rental_duration rentalDuration,
			f.rental_rate rentalRate,
			f.length length,
			f.replacement_cost replacementCost,
			f.rating rating,
			f.special_features specialFeatures,
			f.last_update lastUpdate,
			v.actors actors
		FROM
			film f 
				LEFT JOIN nicer_but_slower_film_list v ON f.film_id = v.FID
				JOIN language l ON f.language_id = l.language_id
		WHERE
			film_id = #{filmId}
	</select>
	<select id="selectFilmActor"
			parameterType="int"
			resultType="java.util.Map">
		SELECT a.actor_id, a.first_name, a.last_name, if(t.actor_id IS NULL, 'F', 'T') checked
		FROM
		actor a LEFT JOIN (SELECT *
								FROM film_actor
								WHERE film_id = #{filmId}) t
		ON a.actor_id = t.actor_id
		ORDER BY a.first_name
	</select>
	<insert id="insertFilmActor" 
			parameterType="java.util.Map">
		INSERT INTO film_actor(
			actor_id,
			film_id
		) VALUES (
			(SELECT actor_id FROM actor WHERE first_name = #{firstName} AND last_name = #{lastName}),
			#{filmId}
		)
		
	</insert>
</mapper>